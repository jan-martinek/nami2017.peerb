name: "API a šablony v Jekyllu"
summary: "API definuje rozhraní aplikace. V Jekyllu se naučíme psát šablony."
goals: |
  Cílem této lekce je porozumět konceptu aplikačního rozhraní (API) a naučit se základní dovednosti při práci s šablonami v Jekyllu.
reading:
rubrics:
  - Slovně zhodnoťte případné nedostatky tohoto úkolu.
preface: 
---
# api article
bloom: apply
params:
  article:
    - "[Brian Proffitt: What APIs Are And Why They’re Important](http://readwrite.com/2013/09/19/api-defined/)"
    - "[Michael Patterson: What Is an API, and Why Does It Matter?](http://sproutsocial.com/insights/what-is-an-api/)"
    - "[Matthew Hughes: What Are APIs, And How Are Open APIs Changing The Internet](http://www.makeuseof.com/tag/api-good-technology-explained/)"
    - "[Greg Sleter: What's an API and Why Do You Need One?](http://www.govtech.com/applications/Whats-an-API-and-Why-Do-You-Need-One.html)"
questions: |
  ### API (Application Programming Interface)
  
  API je definice rozhraní aplikace. Popisuje jaká rozhraní jsou dostupná — tedy **na co se váš program či skript může ptát a jakou dostane odpověď**. 
  
  Příkladem může být zdroj informací o počasí, např.:
  
  - můžete se zeptat na předpověď **počasí**
    - na **určitém místě** (popsáno zeměpisnými souřadnicemi ve formátu dle [RFC 5870](https://tools.ietf.org/html/rfc5870)) 
    - a v **určitém čase** (popsáno řetězcem vytvořeným na základě [RFC 3339](https://tools.ietf.org/html/rfc3339)) 
  - a dostanete odpověď coby **číslo s jedním desetinným místem**, které vyjadřuje teplotu stupních Celsia.
  
  > Díky popisu API přesně víte, co je potřeba a co dostanete.
  
  Při práci s API propojujete jednotlivé služby mezi sebou — podobně jako minule, když jsme se dívali na automatizační služby. Tentokrát však dochází ke skutečné integraci: cizí data dostanete přímo do své aplikace (nebo naopak, svá data poskytnete ostatním). Namísto obdélníků, které obsahují cizí weby, jsou získaná data využitelná kdekoli si zamanete.
  
  Dalším příkladem je třeba kalendář — zeptáte se na plán konkrétního dne (zadáte např. datum ve formátu "YYYY-MM-DD") a kalendář vrátí seznam vašich schůzek ve formátu [ICAL](https://en.wikipedia.org/wiki/ICalendar). 
  
  #### Zadání

  Přečtěte si článek **%article%** a vytáhněte z něj **tři hlavní myšlenky**. Položte otevřenou otázku čtenáři (ne vědomostní, otázka by měla vést k zamyšlení).

  #### Kontext
  
  Širší kontext můžete získat z ostatních článků, které jsou zadané v tomto úkolu:
    
  - [Brian Proffitt: What APIs Are And Why They’re Important](http://readwrite.com/2013/09/19/api-defined/)
  - [Michael Patterson: What Is an API, and Why Does It Matter?](http://sproutsocial.com/insights/what-is-an-api/)
  - [Matthew Hughes: What Are APIs, And How Are Open APIs Changing The Internet](http://www.makeuseof.com/tag/api-good-technology-explained/)
  - [Greg Sleter: What's an API and Why Do You Need One?](http://www.govtech.com/applications/Whats-an-API-and-Why-Do-You-Need-One.html)
rubrics:
  - checklist: ""
    items: 
      - Shrnutí je srozumitelné (bez znalosti článku).
      - Shrnutí obsahuje 3 hlavní myšlenky.
      - Autor/ka pokládá otevřenou otázku dle zadání.
  - Zodpovězte otázku položenou autorem/autorkou.
---
# map embed
bloom: apply
params:
  mode:
    - Place mode
    - Attributed Save
    - Directions mode
    - Search mode
    - View mode
    - Street View mode
questions: |
  ### Google Maps

  Jednoduché *rozhraní* je například URL. Webová adresa je v podstatě sled parametrů — domény různých řádů a řetězec, který někdy označuje cestu (v adresářové struktuře, např. `/blog/index.html`) a někdy předává různé parametry (např. `/search?q=utfg`).
  
  Před několika týdny jsme se potkali s možností vkládat obsah do stránky („embedování“), nyní postoupíme o krůček dál a budeme pracovat s API generátoru map. 
  
  #### Úkol
  
  Zorientujte se v [dokumentaci Google Maps Embed API](https://developers.google.com/maps/documentation/embed/guide#map_modes), které popisuje jak vytvořit volání (v tomto případě jde o webovou adresu), na základě kterého server vrátí určitou mapu. Následně vytvořte tři URL volající mapu, které pracují s módem *%mode%* a využívají různých volitelných parametrů (Optional parameters). Zkontrolujte, zda je volání vytvořeno správně.
  
  > **Tip:** Funkčnost vkládaných prvků můžete ověřit prostým vložením adresy do adresního pole prohlížeče. U Google Maps je tato metoda vhodná i pro postupné ladění – s každou změnou v požadavku (adrese) si můžete zobrazit aktuální odpověď serveru (stránku s mapou).
    
  Do komentáře (přímo ke kódu nebo do pole níže) uveďte, proč jste si vybrali daná místa a popište volitelné parametry, které jste použili.
input: code
comments: 5
rubrics:
  - checklist: ""
    items: 
      - V odpovědi jsou tři různý volání.
      - Parametry jsou zadány správně.
      - Odpověď obsahuje komentář dle zadání (důvody pro výběr, použité volitelné parametry).
      - Výsledky všech tří volání se správně zobrazují v prohlížeči.

---
# popis výstupu API + api key
bloom: understand
input: code
params:
  condition:
    - "Omezte výsledek na prvních 10 událostí."
    - "Nechte si vyfiltrovat pouze události, které obsahují slovo „pivo“."
    - "Vyberte události od 1. ledna 2017 do 1. července 2017."
    - "Vyberte události aktualizované po 1. dubnu 2017."
    - "Nastavte časovou zónu tak, aby byl u událostí zobrazen tokijský čas."
questions: |
  ### Google Calendar

  Pomocí [nástroje pro práci s Google Calendar API v3](https://developers.google.com/apis-explorer/#s/calendar/v3/) vytvořte volání, které vrátí události z vašeho primárního Google kalendáře (volání `calendar.events.list`). %condition% Vytvořte ve svém kalendáři alespoň jednu událost, která vyhovuje zvoleným podmínkám.
     
  Nemusíte zveřejňovat osobní data — popisky událostí v odpovědi serveru můžete změnit. Pokud nemáte Google kalendář, zaregistrujte si účet pro účely testování nebo využijte Google Apps dostupné pomocí ISu. 
  
  Do vstupního pole zkopírujte jak požadavek (Request), tak odpověď serveru (Response). (Vše se vám zobrazí na dané stránce — pokud se zdá, že stránka nereaguje, zkuste jen odscrollovat níže — aktualizace stránky někdy nebývá patrná.)
  
  > **Tip:** Funkční požadavek ověříte tím, že v *Response* uvidíte HTTP kód 200 (nejspíše jste se již setkali s kódem 404, který oznamuje nenalezenou stránku; oproti tomu kód 200 hlásí, že je vše v pořádku). To nicméně nezaručuje, že vaše řešení je správné — požadavek může být korektní, ale pořád se můžete ptát na nesprávné věci či v nesprávném formátu.
rubrics:
  - checklist: ""
    items: 
      - Kód je vytvořen správně.
      - Parametry jsou zadány správně.
---
# šablony - soubory, oddíly (front matter)
bloom: understand
params:
  place:
    - "v globální proměnné `page` (a tedy definované ve *front matter* souborů s koncovkou `.md` uložených ve složce `_posts`)"
    - "v globální proměnné `site` (a tedy definované v souboru `_config.yml`)"
questions: |
  ### Šablonování v Jekyllu
  
  Šablony znáte z kancelářských aplikací: několika kliky můžete změnit podobu celého dokumentu (ať už článku napsaného ve Wordu nebo slajdy v Powerpointu). Krom toho, že si můžete vybrat připravenou šablonu, můžete si je též vytvořit — tímto směrem se vydáme s Jekyllem. Uplatníme při tom naše předchozí znalosti CSS a HTML.
  
  #### Šablony
  
  V základní instalaci Jekyllu je několik souborů, které **určují, jak bude vypadat výsledný web**:
    
  - soubor `style.scss` obsahuje CSS styly (koncovka SCSS označuje využití [preprocesoru SASS](http://sass-lang.com) – ten pokročilým kodérům ušetří čas, ale pro základní použití to není důležité — proto je v repozitáři learn-jekyll jednoduchý soubor `style.css`)
  - složka `_layouts/` obsahuje HTML šablony, z nichž se web skládá
    - `default.html` obsahuje **obecnou HTML šablonu**, kterou sdílejí všechny stránky na webu
    - `page.html` a `post.html` obsahují **HTML šablony pro konkrétní typ stránky**
    
  Je důležité si na toto dělení zvyknout – přednastavené umístění konkrétních souborů nám [může usnadnit práci](https://en.wikipedia.org/wiki/Convention_over_configuration). Proklikejte si stránky a seznamte se s tím, jak jednotlivé soubory vypadají. Povšimněte si především těchto věcí:

  - **značek šablonovacího jazyka [Liquid](https://github.com/Shopify/liquid/wiki)**, které obsahují příkazy a proměnné (využívají značení `{{ }}` a `{% %}`)
  - **značky `{{ content }}`** v souboru `default.html` – zde Jekyll vloží HTML pro konkrétní typ stránky (tedy např. `page.html`),
  - úvodní části šablon, kde je specifikovaný parametr `layout` (tato část se nazývá **„front matter“** — v češtině by to mohly být „úvodní záležitosti“, ale termín se běžně nepřekládá).
  
  #### Parametry stránek
  
  U *front matter* ještě zůstaneme: podívejte se na soubory ve složce `_posts/` a na soubor `about.md`: povšimněte si, jaké hodnoty má parametr `layout` v těchto souborech. Krom toho zde najdete i další parametry, které můžete používat v šablonách.
  
  Jak v `default.html`, tak v `post.html` například najdete `{{ page.title }}`, což je titulek, který je vyplněný v konkrétním příspěvku. Když do *front matter* doplníte jakoukoli další proměnnou, můžete ji používat v šabloně (musíte dodržet pravidla pro názvy proměnných – ale nemusíte mít pravidla nastudovaná, stačí se chovat defenzivně a tvořit názvy podobné jako jsou ty, které již existují).
  
  #### Parametry celého webu
  
  To samé pak platí pro parametry definované v souboru `_config.yml`: můžete je do souborů vkládat pomocí značky `{{ site.nazevParametru }}`. Na první pohled najdete například v hlavičce HTML dokumentu značku `{{ site.name }}`.
  
  Šablony umožňují mnoho dalšího — například podmíněné konstrukce a jiné příkazy, které se zapisují do značek `{% <příkaz> %}`. **Pro naše základní potřeby by měl stačit tento úvod.**
  
  > Upozornění: Shoda v názvu souboru `page.html` a parametrů, které jsou adresovány s prefixem `page.` (např. `{{ page.nazevParametru }}`) je náhodná. Daný soubor by se mohl jmenovat jakkoli jinak, zatímco parametry přenášené z jednotlivých příspěvků (soubory `*.md`) jsou konvenčně prefixovány `page.`.
  
  #### Zdroje
  
  Pokud je něco v textu výše hůře srozumitelné, odkazuji ještě na další zdroje:
    
  - [Yes We Jekyll](http://yeswejekyll.com), kapitola *Project Structure*
  - [Andrew Burgess: Building Static Sites with Jekyll](http://code.tutsplus.com/articles/building-static-sites-with-jekyll--net-22211)
  - [Liquid for Designers](https://github.com/Shopify/liquid/wiki/Liquid-for-Designers)
  - [Some quick thoughts on learning Jekyll](http://www.carlboettiger.info/2012/12/30/learning-jekyll.html), především kapitoly *Getting deeper: Jekyll site file structure* a *Configuration*

  #### Úkol

  Popište, jaké parametry jsou dostupné %place% a jak jsou využívány v základních šablonách přiložených v repozitáři [jan-martinek/learn-jekyll](https://github.com/jan-martinek/learn-jekyll).
rubrics:
  - checklist: ""
    items: 
      - Úloha je zpracována.
      - Všechny parametry jsou vyjmenované.
      - U paramatrů je popsáno zda a jak jsou využívány v šablonách.
---
# šablony - porozumění možnostem
bloom: create
questions: |
  Vytvořte tři úlohy řešitelné pomocí šablon, které se týkají práce se šablonami a parametry v Jekyllu. Využijte přitom parametry definované jak pro celý web (v `_config.yml`), tak pro konkrétní stránky a šablony.
  
  > **Příklad:** Přidejte ke každému článku, který k zobrazení využívá šablonu `page.html`, parametr se jménem autora článku a vložte jej vhodně do šablony.
  
  (Nemusíte se bát, že dané úlohy bude muset řešit recenzent anebo že je dostanete v příští lekci.)
rubrics:
  - checklist: ""
    items: 
      - Odpověď obsahuje tři různé úlohy.
      - V úlohách se pracuje s parametry definovanými pro celý web. (Globální proměnná `site`.)
      - V úlohách se pracuje s parametry definovanými ve stránkách. (Globální proměnná `page`.)
      - Úlohy jsou řešitelné pomocí šablon Jekyllu.
---
# šablony a css
bloom: create
questions: |
  Bez nutnosti kódování navrhněte, jak byste upravili šablony ve vašem týmovém projektu (**vizuální styl, zobrazené informace, struktura informací, informační architektura atp.**).
  
  Neomezujte se na znalosti, které nyní máte: snažte se vytvořit doporučení, která zlepší důvěryhodnost vašeho webu. Nesnažte se být samoúčelně inovativní, využijte spíše konvence, které jsou již na jiných webových stránkách rozšířené (mnohé se můžete naučit i imitací — proto je vhodné přiznat zdroje vaší inspirace a odkázat na ně).
  
  Vytvořte *[moodboard](https://en.wikipedia.org/wiki/Mood_board)*, který shrnuje vizuální prvky, texty, screenshoty, fotky atp. které byste rádi na webu použili. (Ke tvorbě moodboardu můžete použít libovolný online nástroj, který umožňuje zveřejnění výstupu.)
  
  Návrh úprav popište a nezapomeňte přiložit odkaz na vytvořený moodboard. (Očekávaná délka návrhu úprav je alespoň 800 znaků a moodboard by měl obsahovat alespoň 20 objektů, z toho maximálně 4 textové.)
rubrics:
  - checklist: ""
    items: 
      - Úloha je splněna dle zadání.
      - Moodboard a záměr jsou konzistentní.
      - Je poznat, že navrhované změny souvisí s cílovou skupinou projektu.
      - Myslím si, že realizace návrhu by mohla zlepšit důvěryhodnost webu.
  - "Okomentujte záměr a moodboard."
---
# práce v jednom repozitáři
bloom: understand
questions: |
  ### Větvení v gitu

  Když chcete navrhnout změnu v repozitáři na Githubu, je běžné pracovat s *forky*. Při týmové spolupráci pak zpravidla vlastník týmového repozitáře nasdílí svůj repozitář přímo ostatním. To však nicméně neznamená, že budou všichni házet kód do repozitáře hlava-nehlava.

  **Pracovní workflow zůstává velmi podobné:** spolupracovníci pracují ve vlastní *větvi* (*branch*), kde zpracují konkrétní úpravu a následně posílají pull request. Větve fungují na první pohled podobně jako *forky*, nicméně díky tomu, že existují ve stejném repozitáři, umožňují více (v tomto kurzu však nicméně oceníme především jednodušší práci). 
  
  Je běžné, že vlastník repozitáře omezí přístup do hlavní větve (nejspíše jste si všimli označení *master*, což je právě název větve). Když sám vlastník vytváří změny v repozitáři, pracuje stejně — vytvoří větev a vyžádá si kontrolu pull requestu od jiného člena týmu: tomuto se říká „code review“ a při týmové práci je tak zajištěno, že každou změnu omrknou alespoň dva členové týmu.
  
  Ve výsledku tak práce na konkrétní úpravě vypadá následovně:
  
  - (Mám nasdílený týmový repozitář nebo jsem jeho vlastníkem.)
  - Chci udělat změnu, tak si pro ni založím větev v klonu, který mám u sebe v počítači. Takové větvi se říká „feature branch“, protože v ní chcete vytvořit kód pro konkrétní požadovanou vlastnost (feature).
  - Zpracuji změny a commitnu je do této větve.
  - Větev sesynchronizuji na Github a vytvořím pull request do hlavní větve (zpravidla *master*).
  - Jiný člen týmu projde mé změny na stránce pull requestu a vytvoří hodnocení. Následně on/a nebo někdo jiný sloučí změny a pull request uzavře.
  - Větev vytvořenou pro danou změnu je nyní možné smazat. (Větev zůstane v počítači všech, kteří s ní pracovali, protože při synchronizaci vždy pracujete s konkrétní větví.)
  
  > Pozn. Při práci v konkrétní větvi může spolupracovat i více lidí, ale je potřeba, aby se domluvili na způsobu spolupráce.
  
  Tento postup budete v následujících týdnech opakovat často, proto si jej nejprve vyzkoušejte.
  
  #### Úkol
  
  Zadání tohoto úkolu se liší pro vlastníka repozitáře a pro ostatní členy týmu.
  
  - **Pokud jste vlastník týmového repozitáře,** nasdílejte repozitář ostatním a následně nastavte ochranu pro větev *master* tak, aby bylo nutné změny posílat pomocí pull requestů.
  - **Pokud nejste vlastník týmového repozitáře,** nechte si nasdílet týmový repozitář.
  
  Následně si vyzkoušejte práci s větví:
    
  1. Vytvořte si u sebe v počítači větev *"&lt;nazev-vaseho-uctu&gt; testuje tvorbu vetve"* (namísto *&lt;nazev-vaseho-uctu&gt;* vložte název vašeho účtu :-)).
  2. Do kořenové složky vložte soubor `<nazev-vaseho-uctu>-branch-test.md` (opět použijte název vašeho účtu) s libovolným textovým obsahem dle vašich chutí.
  2. Sesynchronizujte si repozitář a vytvořte pull request do větve *master*.
  3. Vyžádejte si od týmového kolegy *code review* — do komentáře uveďte, že si zkoušíte práci s větví, aby bylo zřejmé, proč posíláte tuto konkrétní změnu.
  4. Dosáhněte ve spolupráci s kolegy toho, aby se vaše změny promítly do větve *master*. (Viz výše popsaný postup.)
  
  Ve vstupním poli uveďte odkaz na výše uvedeným postupem vytvořený a schválený (uzavřený) pull request.
rubrics:
  - checklist: ""
    items:
      - Odpověď obsahuje odkaz na pull request v týmovém repozitáři.
      - Název souboru odpovídá názvu účtu uživatele, který zasílá pull request.
      - Pull request je zkontrolovaný a změny jsou sloučeny do *masteru*.
